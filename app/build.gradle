apply plugin: 'com.android.application'
apply from: '../app/MobSDK.gradle'
android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools
    defaultConfig {
        applicationId "com.fastdev.ton"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.versionCode
        versionName versions.versionName
        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }//解决AndroidStudio3.0 注解报错
        multiDexEnabled true

        ndk {
            //https://www.jianshu.com/p/fee82949ff84
            //如果适配版本高于4.1版本，可以直接像我上面这样写，当然，如果armeabi-v7a不是设备主要ABI，那么会在性能上造成一定的影响。
            //如果项目只包含了 armeabi，那么在所有Android设备都可以运行；
            //如果项目只包含了 armeabi-v7a，除armeabi架构的设备外都可以运行；
            //如果项目只包含了 x86，那么armeabi架构和armeabi-v7a的Android设备是无法运行的；
            //如果同时包含了 armeabi,armeabi-v7a和x86，所有设备都可以运行，程序在运行的时候去加载不同平台对应的so，这是较为完美的一种解决方案，同时也会导致包变大。
            //所有的x86/x86_64/armeabi-v7a/arm64-v8a设备都支持armeabi架构的.so文件，因此似乎移除其他ABIs的.so文件是一个减少APK大小的好技巧。但事实上并不是：这不只影响到函数库的性能和兼容性。
            abiFilters "armeabi","armeabi-v7a"/*, "x86", "arm64-v8a", "x86_64", */
        }
    }
    buildTypes {
        debug {
            //是否打印LOG true-false
            buildConfigField "Boolean", "isLog", "true"
            //是否开启开发工具
            buildConfigField "Boolean", "isDevelopTool", "true"
            //服务器地址
            buildConfigField "String", "HOST1", rootProject.ext.host.HOST1_TEST//常量-当前服务器地址
            buildConfigField "String", "HOST1_DEVE", rootProject.ext.host.HOST1_DEVE//常量-开发服务网地址
            buildConfigField "String", "HOST1_TEST", rootProject.ext.host.HOST1_TEST//常量-测试服务网地址
            buildConfigField "String", "HOST1_RELEASE_PRE", rootProject.ext.host.HOST1_RELEASE_PRE//常量-预发布服务网地址
            buildConfigField "String", "HOST1_RELEASE", rootProject.ext.host.HOST1_RELEASE//常量-正式服服务网地址

            debuggable true
            minifyEnabled false //minifyEnabled主要用来控制是否运行混淆的。
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            //是否打印LOG true-false
            buildConfigField "Boolean", "isLog", "true"
            //是否开启开发工具
            buildConfigField "Boolean", "isDevelopTool", "false"
            //服务器地址
            buildConfigField "String", "HOST1", rootProject.ext.host.HOST1_RELEASE//常量-当前服务器地址
            buildConfigField "String", "HOST1_DEVE", rootProject.ext.host.HOST1_DEVE//常量-开发服务网地址
            buildConfigField "String", "HOST1_TEST", rootProject.ext.host.HOST1_TEST//常量-测试服务网地址
            buildConfigField "String", "HOST1_RELEASE_PRE", rootProject.ext.host.HOST1_RELEASE_PRE//常量-预发布服务网地址
            buildConfigField "String", "HOST1_RELEASE", rootProject.ext.host.HOST1_RELEASE//常量-正式服服务网地址

            debuggable false
            minifyEnabled false //minifyEnabled主要用来控制是否运行混淆的。
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation rootProject.ext.google.recyclerview
    implementation rootProject.ext.google.design
    implementation rootProject.ext.google.appcompat
    implementation project(path: ':baselib')
    implementation rootProject.ext.fastDev.updateplugin
    implementation rootProject.ext.fastDev["adapter-recyclerview"]
    implementation rootProject.ext.fastDev.indicator
    implementation (rootProject.ext.fastDev.picture){
        transitive = true
        exclude group: 'com.github.bumptech.glide',module: 'glide'
    }

    //控件id注入库
    implementation rootProject.ext.butterknifeLibs
}
